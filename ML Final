#!/usr/bin/python

import sys
import pickle
import os

import numpy as np
import pandas as pd
import select
from matplotlib import pyplot as plt
from numpy import array
from sklearn.pipeline import Pipeline

sys.path.append(os.path.abspath(("../tools/")))

from feature_format import featureFormat, targetFeatureSplit
from tester import dump_classifier_and_data
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, precision_score, recall_score
from time import time
from sklearn.tree import DecisionTreeClassifier
from sklearn.feature_selection import SelectKBest,  chi2
from sklearn.model_selection import GridSearchCV, KFold
t1 = time()

### Task 1: Select what features you'll use.
### features_list is a list of strings, each of which is a feature name.
### The first feature must be "poi".
features_list = ['poi', 'salary', 'total_payments',  'loan_advances', 'bonus',
                  'expenses', 'exercised_stock_options', 'other', 'long_term_incentive',
                  'director_fees', 'Sus_Emails','to_messages', 'from_poi_to_this_person', 'from_messages',
                 'from_this_person_to_poi', 'shared_receipt_with_poi', 'to_messages',
                 'from_poi_to_this_person', 'from_messages',
                 'from_this_person_to_poi', 'shared_receipt_with_poi']  # You will need to use more features

emailFeatures = ['to_messages', 'email_address', 'from_poi_to_this_person', 'from_messages',
                 'from_this_person_to_poi', 'shared_receipt_with_poi']

finFeatures = ['salary', 'deferral_payments', 'total_payments', 'loan_advances', 'bonus',
               'restricted_stock_deferred', 'deferred_income', 'total_stock_value',
               'expenses', 'exercised_stock_options', 'other', 'long_term_incentive',
               'restricted_stock', 'director_fees']

poi = ['poi']

#print(len(features_list))
total = emailFeatures + finFeatures + poi
print(len(total))


### Load the dictionary containing the dataset
with open("final_project_dataset.pkl", "rb") as data_file:
    data_dict = pickle.load(data_file)

# Verify Data is loading correctly.
# print(data_dict['LAY KENNETH L'])

# Getting POI/NON-POI data
poi = 0
nonPoi = 0

for value in data_dict:
    if data_dict[value]['poi']:
        poi += 1
    else:
        nonPoi += 1

missingValue = 0
for name in data_dict:
    for data in data_dict[name]:
        if data_dict[name][data] == 'NaN':
            missingValue += 1

print("The total number of rows: ", len(data_dict))
print("Number of Person of Interest: ", poi)
print("Number of Non Person of Interest: ", nonPoi)
print("The total number of features are:", len(total))
print("The total number of missing values: ", missingValue)

# print("The total number of features used are: ", totalFeatures)

### Task 2: Remove outliers:
# Remove the "Total" line along with The travel agency and Mr. Lockhart
data_dict.pop('TOTAL', 0)
data_dict.pop('THE TRAVEL AGENCY IN THE PARK', 0)
data_dict.pop('LOCKHART EUGENE E', 0)

# Remove more outliers if their salary or total stock value is NaN
# Verifying  data on a sctterplot.
data = ['salary', 'total_stock_value']
data1 = featureFormat(data_dict, data)
for i in data1:
    expenses = i[0]
    total = i[1]
    plt.scatter(expenses, total)

plt.xlabel('salary')
plt.ylabel('total_stock_value')

# Commented out so code runs faster.
# plt.show()


### Task 3: Create new feature(s)
### Store to my_dataset for easy export below.
my_dataset = data_dict

# Changing the value of Salary and Total Stock Value to 0 if they have NaN
for a in my_dataset:
    if my_dataset[a]['salary'] == 'NaN':
        my_dataset[a]['salary'] = 0.0

for a in my_dataset:
    if my_dataset[a]['total_stock_value'] == 'NaN':
        my_dataset[a]['total_stock_value'] = 0.0

for a in my_dataset:
    if my_dataset[a]['from_poi_to_this_person'] == 'NaN':
        my_dataset[a]['from_poi_to_this_person'] = 0.0
for a in my_dataset:
    if my_dataset[a]['from_this_person_to_poi'] == 'NaN':
        my_dataset[a]['from_this_person_to_poi'] =0.0

for a in my_dataset:
    if my_dataset[a]['from_messages'] == 'NaN':
        my_dataset[a]['from_messages'] = 0.0

# Adding 2 new features
for value in my_dataset:
    if my_dataset[value]['salary'] == 'NaN' or my_dataset[value]['total_stock_value'] == 'NaN':
        continue
    my_dataset[value]['Person_Worth'] = data_dict[value]['salary'] + data_dict[value]['total_stock_value']
    # print(data_dict[value]['Person_Worth'])

for value in my_dataset:
    if my_dataset[value]['from_messages'] == 0:
        my_dataset[value]['Sus_Emails'] = 0.0
        continue
    my_dataset[value]['Sus_Emails'] = round(float(my_dataset[value]['from_this_person_to_poi']) \
                                            / float(my_dataset[value]['from_messages']), 2)


# Verifying My above changes worked.
#for a in my_dataset.values():
#    print(a)

#features_list = total
### Extract features and labels from dataset for local testing
data = featureFormat(my_dataset, features_list, sort_keys = True)
labels, features = targetFeatureSplit(data)





### Task 4: Try a varity of classifiers
### Please name your classifier clf for easy export below.
### Note that if you want to do PCA or other multi-stage operations,
### you'll need to use Pipelines. For more info:
### http://scikit-learn.org/stable/modules/pipeline.html

dt = DecisionTreeClassifier()
parms = {'criterion':('gini', 'entropy'),
         'min_samples_split': [2,3,4,5,6,7,8,9,10]
         }

features_train, features_test, labels_train, labels_test = \
    train_test_split(features, labels, test_size=0.1, random_state=42)



kf=KFold()
for train_indices, test_indices in kf.split(features):
    #make training and testing sets
    features_train= [features[a] for a in train_indices]
    features_test= [features[b] for b in test_indices]
    labels_train=[labels[c] for c in train_indices]
    labels_test=[labels[d] for d in test_indices]


new_feat = SelectKBest(chi2, k=7).fit_transform(features, labels)






# Provided to give you a starting point. Try a variety of classifiers.
#from sklearn.naive_bayes import GaussianNB
#clf = GaussianNB()
#clf.fit(features_train, labels_train)
#pred = clf.predict(features_test)
#score = clf.score(features_test, labels_test)
#print('Time: ', round(time() - t1, 3), "s")
#print(pred)
#print(score)
#print('Pres :', precision_score(pred, labels_test, average='weighted'))
#print('Recall :', recall_score(pred, labels_test, average='weighted'))

#from sklearn.tree import DecisionTreeClassifier
#clf = DecisionTreeClassifier()
#clf.fit(features_train, labels_train)
#pred = clf.predict(features_test)
#print('Time: ', round(time() - t1, 3), "s")
#print(pred)
#score = clf.score(features_test, labels_test)
#print('Score:' ,score)
#print('Prec :', precision_score(pred, labels_test, average='weighted', zero_division=0))
#print('Recall :', recall_score(pred, labels_test, average='weighted', zero_division=0))

#val = clf.feature_importances_
#ind = np.argsort(val)[::-1]
#print(ind)
#for i in range(len(new_feat)):
#    print("{} feature {} ({})".format(i+1,features_list[i+1],val[ind[i]]))


### Task 5: Tune your classifier to achieve better than .3 precision and recall
### using our testing script. Check the tester.py script in the final project
### folder for details on the evaluation method, especially the test_classifier
### function. Because of the small size of the dataset, the script uses
### stratified shuffle split cross validation. For more info:
### http://scikit-learn.org/stable/modules/generated/sklearn.cross_validation.StratifiedShuffleSplit.html

parms = {'criterion':('gini', 'entropy'),
         'min_samples_split': [2,3,4,5,6,7,8,9,10]
         }

grid = GridSearchCV(dt, parms)
grid.fit(features_train, labels_train)
clf = grid.best_estimator_
pred = clf.predict(features_test)
print('Time: ', round(time() - t1, 3), "s")
#print(pred)
score = clf.score(features_test, labels_test)
print(score)
print('Pres :', precision_score(pred, labels_test, average='weighted', zero_division=0))
print('Recall :', recall_score(pred, labels_test, average='weighted', zero_division=0))
#df = pd.DataFrame(clf.cv_results_)
#pd.set_option("display.max_columns", 100)
#print(df) Removed as a suggestion from the review team.





### Task 6: Dump your classifier, dataset, and features_list so anyone can
### check your results. You do not need to change anything below, but make sure
### that the version of poi_id.py that you submit can be run on its own and
### generates the necessary .pkl files for validating your results.

dump_classifier_and_data(clf, my_dataset, features_list)
