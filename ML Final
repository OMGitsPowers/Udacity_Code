#!/usr/bin/python

import sys
import pickle
import os

from matplotlib import pyplot as plt
sys.path.append(os.path.abspath(("../tools/")))

from feature_format import featureFormat, targetFeatureSplit
from tester import dump_classifier_and_data
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from time import time
### Task 1: Select what features you'll use.
### features_list is a list of strings, each of which is a feature name.
### The first feature must be "poi".
features_list = ['salary', 'total_stock_value'] # You will need to use more features

### Load the dictionary containing the dataset
with open("final_project_dataset.pkl", "rb") as data_file:
    data_dict = pickle.load(data_file)

#Verify Data is loading correctly.
print(len(data_dict.keys()))
print(data_dict['LAY KENNETH L'])



### Task 2: Remove outliers:
#Remove the "Total" line
data_dict.pop( 'TOTAL', 0 )
#Remove more outliers if their salary or total stock value is NaN
out = []
for i in data_dict:
    sal = data_dict[i]['salary']
    stk = data_dict[i]['total_stock_value']
    if sal == 'NaN' or stk == 'NaN':
        out.append(i)
        continue
#print(out)
#Verifying my data on a sctterplot.
data = ['poi','salary', 'total_stock_value']
data1 = featureFormat(data_dict, data)
for i in data1:
    expenses = i[0]
    total = i[1]
    plt.scatter(expenses, total)

plt.xlabel('salary')
plt.ylabel('total_stock_value')




#plt.show() commented out so code runs faster.

#Verifying scaling of features
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler(feature_range= (0,1))
scl = scaler.fit_transform(data1)
#print(scaler.data_max_) # show max values in each feature
scaled = scaler.transform(data1)
#print(scl)


### Task 3: Create new feature(s)
### Store to my_dataset for easy export below.

my_dataset = data_dict
for value in data_dict:
    if my_dataset[value]['salary'] == 'NaN' or my_dataset[value]['total_stock_value'] == 'NaN':
        continue
    my_dataset[value]['Person_Worth'] = data_dict[value]['salary'] + data_dict[value]['total_stock_value']
    #print(data_dict[value]['Person_Worth'])

#Changing the value of Salary and Total Stock Value to 0 if they have NaN
for a in my_dataset:
    if my_dataset[a]['salary'] == 'NaN':
        my_dataset[a]['salary'] = 0

for a in my_dataset:
    if my_dataset[a]['total_stock_value'] == 'NaN':
        my_dataset[a]['total_stock_value'] = 0

print(my_dataset)


### Extract features and labels from dataset for local testing
data = featureFormat(my_dataset, features_list, sort_keys = True)
labels, features = targetFeatureSplit(data)

### Task 4: Try a varity of classifiers
### Please name your classifier clf for easy export below.
### Note that if you want to do PCA or other multi-stage operations,
### you'll need to use Pipelines. For more info:
### http://scikit-learn.org/stable/modules/pipeline.html

### Task 5: Tune your classifier to achieve better than .3 precision and recall
### using our testing script. Check the tester.py script in the final project
### folder for details on the evaluation method, especially the test_classifier
### function. Because of the small size of the dataset, the script uses
### stratified shuffle split cross validation. For more info:
### http://scikit-learn.org/stable/modules/generated/sklearn.cross_validation.StratifiedShuffleSplit.html

features_train, features_test, labels_train, labels_test = \
    train_test_split(features, labels, test_size=0.1, random_state=42)

t1 = time()
# Provided to give you a starting point. Try a variety of classifiers.
from sklearn.naive_bayes import GaussianNB
clf = GaussianNB()
clf.fit(features_train, labels_train)
pred = clf.predict(features_test)
arc_NB = accuracy_score(pred, labels_test)
print("Naive Bayes", arc_NB)
print("Naive Bayes process time:", round(time()-t1, 3), "s")


from sklearn import svm
clf2 = svm.SVC(kernel='rbf')
clf2.fit(features_train, labels_train)
pred = clf2.predict(features_test)
arc_svm = accuracy_score(pred, labels_test)
print("SVM:", arc_svm)
print("SVM process time:", round(time()-t1, 3), "s")

from sklearn.neighbors import KNeighborsClassifier
clf3 = KNeighborsClassifier(n_neighbors=10)
clf3.fit(features_train, labels_train)
pred = clf3.predict(features_test)
arc_kn = accuracy_score(pred, labels_test)
print("KN:", arc_kn)
print("KNeighbors process time:", round(time()-t1, 3), "s")

from sklearn.tree import DecisionTreeClassifier
clf4 = DecisionTreeClassifier(min_samples_split=5)
clf4.fit(features_train, labels_train)
pred = clf3.predict(features_test)
dct = accuracy_score(pred, labels_test)
print("DC:", arc_kn)
print("Decsion Tree process time:", round(time()-t1, 3), "s")

### Task 6: Dump your classifier, dataset, and features_list so anyone can
### check your results. You do not need to change anything below, but make sure
### that the version of poi_id.py that you submit can be run on its own and
### generates the necessary .pkl files for validating your results.

#dump_classifier_and_data(clf, my_dataset, features_list)
